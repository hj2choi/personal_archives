class Euler0to10
{	public static void main(String args[])
	{
		System.out.println("This Program is used to solve basic questions on project Euler");
		// qn 1
		/*If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
			Find the sum of all the multiples of 3 or 5 below 1000.*/
		/*
		int answer = 0;
		for (int i = 0;i<1000 ;i++ )
		{
			if (i%3==0 || i%5==0)
			{
				answer = answer+i;
			}
		}
		System.out.println(answer);
		


		// qn 2
		/*Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

		1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

		By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
		*/
		/*
		long answer = 0;
		long term = 100;
		long first = 1;
		long second = 1;
		long temp = 0;
		for (long a = 0;a<term ;a++ )							// Fibbonaci sequence
		{
			if ((first+second)%2==0 && (first+second)<4000000 && (first+second)>0)
			{
				answer=answer+(first+second);
			}
			temp = first;
			first = second;
			second = temp+second;
		}
		System.out.println(answer);
		


		// qn 4	
		/*A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 99.
			Find the largest palindrome made from the product of two 3-digit numbers.
		*/
		/*
		long number = 0;
		long palindromic = 0;
		long result = 0;
		long digit = 1;
		int ct = 0;
		for (long a = 993;a>992 ;a-- )
		{
			for (long b = 913;b>912 ;b-- )
			{
				number = 0;
				palindromic = 0;
				result = 0;
				number = a*b;
				result = number;
				//System.out.println(number);
				while(number>=1)
				{
					number = number/10;
					ct++;
				}
				digit = 1;
				for (int l = ct;l>1 ;l-- )
				{
					digit = digit*10;
				}
				palindromic = 0;
				for (long i = digit;i>0 ;i=i/10 )
				{
					if ((result/i)%10 == 0)
					{
						continue;
					}
					palindromic = palindromic+((result/i)%10)*digit/i;
				}
					System.out.println(palindromic);
				if (result == palindromic)
				{
					System.out.println(result);
				}
			}
		}*/


		// qn 5
		/*
		2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
		What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
		*/
		/*
		int chk = 0;
		long valuechk = 0;
		long num = 0;
		System.out.println("This process will take more than a minitue, so be patient");
		for (num = 2; num<299999999 ;num++ )
		{
			chk = 0;
			for (long a = 2;a<21 ;a++ )									//factor finding
				{
					
					valuechk=num%a;
					//System.out.println(valuechk); //test
					if (valuechk==0)
					{
						//System.out.println(a);
						chk++;
					}
				}
				if (chk >18)
				{
					System.out.println(num);
				}
		}
		


		// qn 6
		/*
		Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
		*/
		/*
		long answer = 0;
		long sum  = 0;
		for (long a = 1;a<101 ;a++ )
		{
			for (long b = 0;b<2 ;b++ )
			{
				sum = a*a;
			}
			answer = answer+sum;
		}
		System.out.println(answer);
		

		// qn9
		/*
		There exists exactly one Pythagorean triplet for which a + b + c = 1000.
		Find the product abc.
		*/
		
		long a = 0;
		long b = 0;
		long c = 0;
		long sum = 0;
		boolean chk = false;
		long f = 0;
		long s = 0;
		System.out.println("This process will take about 2 minitues");
		for (int i = 0;i<500 ;i++ )
		{
			for (int k=0;k<500 ;k++ )
			{
				sum = 0;
				chk = false;
				a = i*i;
				b = k*k;
				c = a+b;
				
				for (int j = 0;j<600 ;j++ )			//	 chk if c is power of a number, j is a number
				{
					for (int g = 0;g<600 ;g++ )
					{
						if (j==g)
						{
							if (j*g==c)
							{
								chk = true;
								System.out.println(c);
								sum = j;
								f = i;
								s = k;
								break;
							}
					   	}
					}
					if (chk == true)
						break;
				}
				if (chk == true)
				{
					//System.out.println(f+s+sum);
					if (f+s+sum == 1000)
					{
						System.out.println(f*s*sum);
						return;
					}
				
				}
			}
		}
		
		
		// qn 10
		/*The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
			Find the sum of all the primes below two million. */
			/*
			int valuechk = 0;
			long answer = 0;
			for (int you = 2;you<2000000 ;you++ )
			{
				boolean chk = false;
				for (int a = 2;a<you ;a++ )									//factor finding
				{
					chk = false;
					valuechk=you%a;
					if (valuechk==0)
					{
						chk = true;
						break;
					}
				}
				if (chk == false )											// prime number
				{
					System.out.println(you);
					answer = answer+you;
					System.out.println(answer);
				}
			}
			System.out.println(answer);
			*/
			// qn 12
			/*
			What is the value of the first triangle number to have over five hundred divisors?
			*/
			/*
			long c = 0;
			int r = 0;
			int n = 1;
			
			for (long y = 1;y<2000000000 ;y=y+n )
			{
				n++;
				r = 0;
				System.out.println(y);
				for (long a = 1;a<y ;a++ )									//factor finding
					{
						c=y%a;
						if (c==0)
						{
							r++;
						}
					}
					System.out.println(r);
					if (r > 500)											// 500 divisors
					{
						System.out.println(y+" answer");
						return;
					}
			}
			*/
			// qn3
			// what's the largest prime factor of 600851475143?
			/*
			long num = 0;
			num = 851475143;
			for (int i = 0;i<300 ;i++ )
			{
				num = num+2000000000;
			}
			System.out.println(num);

			boolean ans = false;
			long value;
			for (long a = 2;a< num ;a++ )
			{
				value = num%a;
				if (value==0)
				{
					for (long k = 2;k< a;k++ )
					{
						long chk = a%k;
						if (chk == 0)
						{
							ans = true;
						}
						if (ans == false)
						{
							//System.out.println(a);
						}
					}
				}
			}
			*/
	}
}