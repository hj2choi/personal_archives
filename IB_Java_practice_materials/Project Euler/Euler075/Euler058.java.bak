class Euler058		//Spiral : Easiest I ever seen!!!!!
{
	public static String appendCommas(int n)
    {
    	String ss = "";
    	char[] ch = (n+"").toCharArray();
		int i;
    	for (i=ch.length-1; i>=3; i-=3)
    		ss= ","+ch[i]+ch[i-1]+ch[i-2]+ss;
		for (int j=i; j>=0; j--)
			ss=ch[j]+ss;
    	return ss;
    }
	public static void main(String[] args) 
	{
		System.out.println(appendCommas(3000000));
		System.out.println("a");
		//System.out.println(1718f/161f);
		boolean[] primes = generatePrimes(500000000);
		int sF = 500000000;
		//sF*=1000000000;
		int numerator=0;
		int denomenator=0;
		int i=1;
		int skip=2;

		int sideLength=1;
		System.out.println("aa");
		while (i<sF)
		{
			//System.out.println(numerator+"/"+denomenator+"  "+sideLength);
			denomenator++;
			if (primarility(primes, i))
				numerator++;
			if ((skip+1)*(skip+1)==i)
			{
				sideLength+=2;
				skip+=2;
				if ((double)numerator/(double)denomenator<0.10)
				{
					System.out.println(numerator+"/"+denomenator+"  "+sideLength);
					return;
				}
			}
			i+=skip;
		}
		//System.out.println("ans = "+ans);
	}

	public static boolean[] generatePrimes(int num)// for enhancedPrimeCheck
	{
		int limit=num+1;
		boolean[] prime = new boolean[num+1];

		for (int i=3; i<=num; i+=2)
			for (int j=i*2; j<=num; j+=i)
				prime[j]=true;
		return prime;
	}

	public static boolean primarility(boolean[] prime, int num)
	{
		if (prime[num])
			return false;
		return true;
	}
}
