import java.io.*;
public class sortMethods
{
	static long initialTimeInSpeedCheck=0;

	public static int[] list = new int[30000];
	public static int	index;
	
 /** A test method */
	public static void main(String[] args) throws IOException
	{
	    load();
	    System.out.println("[1] Bubble sort\n[2] Selection sort\n[3] Insertion sort\n[4] HongJoon sort\n (It takes String[] args for input)");
	    startSpeedTest();

	    if (Integer.parseInt(args[0])==1)
		    bubbleSort();
	    else if (Integer.parseInt(args[0])==2)
		    selectionSort(list, index);
	    else if (Integer.parseInt(args[0])==3)
		    insertionSort(list, index);
	    else if (Integer.parseInt(args[0])==4)
		    list=integerSort(list, index, 50000);

	   getSpeed();
		/*for (int i = 0; i < list.length; i++)
			System.out.print(list[i] + " ");
		*/
		save();
	}

 /** End of test method */
	public static void load() throws IOException
	{	// load FILE into ARRAY
		index = 0;
		File			ff = new File("Nums.txt");
		FileReader		fr = new FileReader(ff);
		BufferedReader	in = new BufferedReader(fr);
		while ( in.ready() )
		{	// read lines while file has content
			list[index] = Integer.parseInt( in.readLine() );
			index++;
		}
		in.close();
		System.out.println("File successfully loaded.");
	}
	//------------------------------------------------------------------
	
	public static void save() throws IOException
	{	// write/update the FILE
		File		ff	= new File("NumsSorted.txt");
		FileWriter	fw	= new FileWriter(ff);
		PrintWriter out = new PrintWriter(fw);
		for (int i = 0; i < index; i++)
			out.println( list[i] );
		out.close();
		System.out.println("File successfully saved.");
	}
	//------------------------------------------------------------------

	public static void bubbleSort()
	{	/** Bubble sort method */
    		boolean needNextPass = true;	// * Early exit bubble sort flag
    
		for (int k = 1; k < list.length && needNextPass; k++)
		{	// Array may be sorted and next pass not needed * see -^
			needNextPass = false;
			for (int i = 0; i < list.length - k; i++)
			{	if (list[i] > list[i + 1])
				{	// Swap list[i] with list[i + 1]
					int temp = list[i];
					list[i] = list[i + 1];
					list[i + 1] = temp;        
					needNextPass = true; // Next pass still needed
				}
			}
		}
	}
	//public static void

	public static void selectionSort(int array[], int n)
	{
		for(int x=0; x<n; x++)
		{
			int index_of_min = x;
			for(int y=x; y<n; y++)
			{
				if(array[index_of_min]>array[y])
				{
					index_of_min = y;
				}
			}
			int temp = array[x];
			array[x] = array[index_of_min];
			array[index_of_min] = temp;
		}
	}
	public static void insertionSort(int array[], int n)
	{
		for (int i = 1; i < n; i++)
		{
			int j = i;
			int B = array[i];
			while ((j > 0) && (array[j-1] > B))
			{
				array[j] = array[j-1];
				j--;
			}
			array[j] = B;
		}
	}
	public static int[] integerSort(int array[], int n, int range)
	{
		int[] newArray = new int[n];
		int newIndex = 0;
		for (int i=0; i<=range; i++)
			for (int j=0; j<n; j++)
				if (array[j]==i)
					newArray[newIndex++]=array[j];
		return newArray;
	}

	public static void startSpeedTest()
	{
		initialTimeInSpeedCheck=System.currentTimeMillis();
	}
	public static void getSpeed()
	{
		System.out.println("time taken = "+(System.currentTimeMillis()-initialTimeInSpeedCheck)+"ms");
	}
}

/*
time java BubbleSort
File successfully loaded.
File successfully saved.

real	0m1.814s
user	0m1.940s
sys	0m0.000s
*/
