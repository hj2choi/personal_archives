#ifndef _PAIR_IMPL_H_
#define _PAIR_IMPL_H_


// TODO: 
// ========================================================================
// Implementation of
//    template 
//    class Pair <class FirstType, class SecondType>
// ========================================================================

#include "Pair.h"


template<class FirstType, class SecondType>
Pair<FirstType, SecondType>::Pair() : m_first(), m_second()
{
}

template<class FirstType, class SecondType>
Pair<FirstType, SecondType>::Pair(const FirstType& first, const SecondType& second)
{
	m_first = first;
	m_second = second;
}

template<class FirstType, class SecondType>
Pair<FirstType, SecondType>::Pair(const Pair<FirstType, SecondType>& copy)
{
	m_first = copy.m_first;
	m_second = copy.m_second;
}

template<class FirstType, class SecondType>
Pair<FirstType, SecondType>& Pair<FirstType, SecondType>::operator=(const Pair<FirstType, SecondType>& assign)
{
	m_first = assign.m_first;
	m_second = assign.m_second;

	return *this;
}

template<class FirstType, class SecondType>
void Pair<FirstType, SecondType>::setFirst(const FirstType& first)
{
	m_first = first;
}

template<class FirstType, class SecondType>
void Pair<FirstType, SecondType>::setSecond(const SecondType& second)
{
	m_second = second;
}

template<class FirstType, class SecondType>
void Pair<FirstType, SecondType>::set(const FirstType& first, const SecondType& second)
{
	m_first = first;
	m_second = second;


}


template<class FirstType, class SecondType>
FirstType Pair<FirstType, SecondType>::getFirst()
{
	return m_first;
}

template<class FirstType, class SecondType>
SecondType Pair<FirstType, SecondType>::getSecond()
{
	return m_second;
}

template<class FirstType, class SecondType>
const FirstType& Pair<FirstType, SecondType>::getFirst() const
{
	FirstType temp = m_first;
	return temp;

}

template<class FirstType, class SecondType>
const SecondType& Pair<FirstType, SecondType>::getSecond() const
{
	SecondType temp = m_second;
	return temp;

}


#endif // _PAIR_IMPL_H_