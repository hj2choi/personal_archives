#ifndef HASH_TABLE_IMPL_H
#define HASH_TABLE_IMPL_H


// TODO: 
// ========================================================================
// Implementation of
//    template<class ElemType>
//    class HashTable

// ========================================================================

#include "HashTable.h"

template<class ElemType>
HashTable<ElemType>::HashTable(int numBuckets, HashFunc hashFunc)
{
	m_buckets = new DoublyLinkedList<ElemType>[numBuckets];
	m_numBuckets = numBuckets;
	m_hashFunction = hashFunc;
	m_size=0;
}

template<class ElemType>
HashTable<ElemType>::HashTable(const HashTable<ElemType>& copy)
{
	m_buckets = new DoublyLinkedList<ElemType>[copy.m_numBuckets];
	m_numBuckets = copy.m_numBuckets;
	
	for (int i=0; i<m_numBuckets; i++)
	{
		m_buckets[i] = copy.m_buckets[i];
	}
	
	m_hashFunction = copy.m_hashFunction;
	m_size = copy.m_size;

}
template<class ElemType>
HashTable<ElemType>& HashTable<ElemType>::operator=(const HashTable<ElemType>& assign)
{
	m_buckets = new DoublyLinkedList<ElemType>[assign.m_numBuckets];
	m_numBuckets = assign.m_numBuckets;
	
	for (int i=0; i<m_numBuckets; i++)
	{
		m_buckets[i] = assign.m_buckets[i];
	}
	
	m_hashFunction = assign.m_hashFunction;
	m_size = assign.m_size;

}

template<class ElemType>
HashTable<ElemType>::~HashTable()
{
	delete[] m_buckets;
}


template<class ElemType>
typename HashTable<ElemType>::Iterator HashTable<ElemType>::insert(const ElemType& element)
{
	int hashLocation = m_hashFunction(element, m_numBuckets);
	m_buckets[hashLocation].insert(element);
	m_size++;
	
	typename HashTable<ElemType>::Iterator itr(this, hashLocation, m_buckets[hashLocation].search(element));
	
	return itr;
}

template<class ElemType>
bool HashTable<ElemType>::isExist(const ElemType& target) const
{
	return search(target)!=end();
}

template<class ElemType>
bool HashTable<ElemType>::deleteElem(const ElemType& target)
{
	int prevBucketSize = m_buckets[m_hashFunction(target, m_numBuckets)].size();
	bool deleted = m_buckets[m_hashFunction(target, m_numBuckets)].deleteElem(target);
	m_size -= prevBucketSize-m_buckets[m_hashFunction(target, m_numBuckets)].size();
	return deleted;
}

template<class ElemType>
bool HashTable<ElemType>::deleteElem(typename HashTable<ElemType>::Iterator& it)
{
	int prevBucketSize = m_buckets[m_hashFunction(*it, m_numBuckets)].size();
	bool deleted = m_buckets[m_hashFunction(*it, m_numBuckets)].deleteElem(*it);
	m_size -= prevBucketSize-m_buckets[m_hashFunction(*it, m_numBuckets)].size();
	return deleted;
}

template<class ElemType>
inline int HashTable<ElemType>::size() const
{
	return m_size;
}

template<class ElemType>
typename HashTable<ElemType>::Iterator HashTable<ElemType>::begin()
{
	typename HashTable<ElemType>::Iterator itr(this, HASH_END_ITERATOR_BUCKET_INDEX, m_buckets[0].end());
	
	for (int i=0; i<m_numBuckets; i++)
	{
		if (m_buckets[i].size()!=0)
		{
			itr.set(this, i, m_buckets[i].begin());
			break;
		}
	}
	
	return itr;
}

template<class ElemType>
typename HashTable<ElemType>::ConstIterator HashTable<ElemType>::begin() const
{
	typename HashTable<ElemType>::ConstIterator itr(this, HASH_END_ITERATOR_BUCKET_INDEX, m_buckets[0].end());
	
	for (int i=0; i<m_numBuckets; i++)
	{
		if (m_buckets[i].size()!=0)
		{
			itr.set(this, i, m_buckets[i].begin());
			break;
		}
	}
	
	return itr;
}

template<class ElemType>
typename HashTable<ElemType>::Iterator HashTable<ElemType>::end()
{
	typename HashTable<ElemType>::Iterator itr(this, HASH_END_ITERATOR_BUCKET_INDEX, m_buckets[m_numBuckets-1].end());
	return itr;
}

template<class ElemType>
typename HashTable<ElemType>::ConstIterator HashTable<ElemType>::end() const
{
	typename HashTable<ElemType>::ConstIterator itr(this, HASH_END_ITERATOR_BUCKET_INDEX, m_buckets[m_numBuckets-1].end());
	return itr;
}

template<class ElemType>
typename HashTable<ElemType>::Iterator HashTable<ElemType>::search(const ElemType& target)
{
	typename HashTable<ElemType>::Iterator itr(this, m_hashFunction(target, m_numBuckets), m_buckets[m_hashFunction(target, m_numBuckets)].search(target));
	if (itr.m_iterator == m_buckets[m_hashFunction(target, m_numBuckets)].end())
		itr.set(this,HASH_END_ITERATOR_BUCKET_INDEX,m_buckets[m_numBuckets-1].end());
	return itr;
}

template<class ElemType>
typename HashTable<ElemType>::ConstIterator HashTable<ElemType>::search(const ElemType& target) const
{
	typename HashTable<ElemType>::ConstIterator itr(this, m_hashFunction(target, m_numBuckets), m_buckets[m_hashFunction(target, m_numBuckets)].search(target));
	if (itr.m_iterator == m_buckets[m_hashFunction(target, m_numBuckets)].end())
		itr.set(this,HASH_END_ITERATOR_BUCKET_INDEX,m_buckets[m_numBuckets-1].end());
	return itr;
}

#endif // HASH_TABLE_IMPL_H 