#ifndef DOUBLE_LINKED_LIST_ITERATORS_H
#define DOUBLE_LINKED_LIST_ITERATORS_H

// ============================================
// Implementation of
//   template<class ElemType>
//   DoublyLinkedList<ElemType>::Iterator
// ============================================

template<class ElemType>
DoublyLinkedList<ElemType>::Iterator::Iterator()
{
	m_pLinkedList = NULL;
	m_pNode = NULL;
}

template<class ElemType>
DoublyLinkedList<ElemType>::Iterator::Iterator(
	DoublyLinkedList* linkedList, DoublyLinkedListNode* element) {
	m_pLinkedList = linkedList;
	m_pNode = element;
}

template<class ElemType>
ElemType&
DoublyLinkedList<ElemType>::Iterator::operator*() const
{
 	return (m_pNode->m_element);	// it will be fail if m_pNode is NULL, similar as normal pointer operation
}

template<class ElemType>
typename DoublyLinkedList<ElemType>::Iterator&
DoublyLinkedList<ElemType>::Iterator::operator++()     // prefix
{
	if ( m_pLinkedList != NULL && m_pNode != NULL )
	{
        if ( m_pNode->m_next == m_pLinkedList->m_head )
			m_pNode = NULL;
		else m_pNode = m_pNode->m_next;
	}

	return (*this);
}

template<class ElemType>
typename DoublyLinkedList<ElemType>::Iterator
DoublyLinkedList<ElemType>::Iterator::operator++(int)	// postfix
{
	Iterator temp = (*this);
	++(*this);
	return temp;
}

template<class ElemType>
void DoublyLinkedList<ElemType>::Iterator::set(
	DoublyLinkedList* linkedList, DoublyLinkedListNode* element)
{
	m_pLinkedList = linkedList;
	m_pNode = element;
}

template<class ElemType>
DoublyLinkedList<ElemType>::ConstIterator::ConstIterator()
{
	m_pLinkedList = NULL;
	m_pNode = NULL;
}

template<class ElemType>
DoublyLinkedList<ElemType>::ConstIterator::ConstIterator(
	const DoublyLinkedList* linkedList, const DoublyLinkedListNode* element)
{
	m_pLinkedList = linkedList;
	m_pNode = element;
}

template<class ElemType>
DoublyLinkedList<ElemType>::ConstIterator::ConstIterator(const Iterator& nonCostIterator)
{
	m_pLinkedList = nonCostIterator.m_pLinkedList;
	m_pNode = nonCostIterator.m_pNode;
}

template<class ElemType>
typename DoublyLinkedList<ElemType>::ConstIterator&
DoublyLinkedList<ElemType>::ConstIterator::operator=(const Iterator& assign)
{
	m_pLinkedList = assign.m_pLinkedList;
	m_pNode = assign.m_pNode;
	return (*this);
}

template<class ElemType>
const ElemType&
DoublyLinkedList<ElemType>::ConstIterator::operator*() const
{
	return (m_pNode->m_element);	// it will be fail if m_pNode is NULL, similar as normal pointer operation
}

template<class ElemType>
typename DoublyLinkedList<ElemType>::ConstIterator&
DoublyLinkedList<ElemType>::ConstIterator::operator++()		// prefix
{
	if ( m_pLinkedList != NULL )
	{
        if ( m_pNode->m_next == m_pLinkedList->m_head )
			m_pNode = NULL;
		else m_pNode = m_pNode->m_next;
	}

	return (*this);
}

template<class ElemType>
typename DoublyLinkedList<ElemType>::ConstIterator
DoublyLinkedList<ElemType>::ConstIterator::operator++(int)	// postfix
{
	ConstIterator temp = (*this);
	++(*this);
	return temp;
}

template<class ElemType>
void DoublyLinkedList<ElemType>::ConstIterator::set(
	const DoublyLinkedList* linkedList, const DoublyLinkedListNode* element)
{
	m_pLinkedList = linkedList;
	m_pNode = element;
}



#endif // DOUBLE_LINKED_LIST_ITERATORS_H
