#ifndef DOUBLY_LINKED_LIST_IMPL
#define DOUBLY_LINKED_LIST_IMPL


// TODO: 
// ========================================================================
// Implementation of
//    template<class ElemType>
//    class DoublyLinkedList
// ========================================================================


#include "DoublyLinkedList.h"

template<class ElemType>
DoublyLinkedList<ElemType>::DoublyLinkedList()
{
	m_head = new DoublyLinkedListNode();
	m_head->m_prev=m_head;
	m_head->m_next=m_head;
	m_size=0;


}

template<class ElemType>
DoublyLinkedList<ElemType>::~DoublyLinkedList()
{
	for (DoublyLinkedListNode* p = m_head->m_next;p!=m_head;)
	{
		DoublyLinkedListNode* temp = p;
		p=p->m_next;
		delete temp;
	}
	delete m_head;

}

template<class ElemType>
DoublyLinkedList<ElemType>::DoublyLinkedList(const DoublyLinkedList<ElemType>& copy)
{
	clear();
	DoublyLinkedListNode* q = m_head;
	for (DoublyLinkedListNode* p = copy.m_head->m_next; p!=m_head; p=p->m_next)
	{
		q->m_element = p->m_element;
		q->m_prev = p->m_prev;
		q->m_next = p->m_next;
		q = q->m_next;
	}
	m_size = copy.m_size;
}

template<class ElemType>
DoublyLinkedList<ElemType>& DoublyLinkedList<ElemType>::operator=(const DoublyLinkedList<ElemType>& assign)
{
	clear();
	DoublyLinkedListNode* q = m_head;
	for (DoublyLinkedListNode* p = assign.m_head->m_next; p!=m_head; p=p->m_next)
	{
		q->m_element = p->m_element;
		q->m_prev = p->m_prev;
		q->m_next = p->m_next;
		q = q->next;
	}
	m_size = assign.m_size;




}

template<class ElemType>
typename DoublyLinkedList<ElemType>::Iterator DoublyLinkedList<ElemType>::insert(const ElemType& element)
{
	++m_size;
	DoublyLinkedListNode* p = m_head;
	if (!(element<p->m_next->m_element))
	{
		p=p->m_next;
		for (;p->m_next!=m_head;p=p->m_next)
		{
			if (!(element<p->m_element) && (!(p->m_next<m_head || m_head<p->m_next) || element<p->m_next->m_element))
				break;
		}
	}
	DoublyLinkedListNode* newNode = new DoublyLinkedListNode(element);
	newNode->m_next = p->m_next;
	newNode->m_prev = p;
	
	p->m_next = newNode;
	
	newNode->m_next->m_prev=newNode;
	if (newNode->m_next==m_head)
		m_head->m_prev = newNode;
	
	typename DoublyLinkedList<ElemType>::Iterator itr(this, p->m_next);
	return itr;
	
}

template<class ElemType>
bool DoublyLinkedList<ElemType>::isExist(const ElemType& element) const
{
	return search(element)!=end();


}

template<class ElemType>
bool DoublyLinkedList<ElemType>::deleteElem(const ElemType& element)
{
	bool itemDeleted = 0;
	DoublyLinkedListNode* p = m_head;
	
	for (;p->m_next!=m_head;p=p->m_next)
	{
		if (!(p->m_next->m_element<element || element<p->m_next->m_element))
		{
			itemDeleted=1;
			DoublyLinkedListNode* deleteTarget = p->m_next;
			p->m_next = p->m_next->m_next;
			p->m_next->m_prev = p;
			
			delete deleteTarget;
			m_size--;
			p=p->m_prev;
		}
	
	}



	return itemDeleted;
}

template<class ElemType>
bool DoublyLinkedList<ElemType>::deleteElem(typename DoublyLinkedList<ElemType>::Iterator& it)
{
	ElemType elementTarget = *it;
	bool itemDeleted = 0;
	DoublyLinkedListNode* p = m_head;
	
	for (;p->m_next!=m_head;p=p->m_next)
	{
		if (!(p->m_next->m_element<elementTarget || elementTarget<p->m_next->m_element))
		{
			it++;
			itemDeleted=1;
			DoublyLinkedListNode* deleteTarget = p->m_next;
			p->m_next = p->m_next->m_next;
			p->m_next->m_prev = p;
			
			delete deleteTarget;
			m_size--;
			p=p->m_prev;
			
		}
	
	}

	return itemDeleted;

}

template<class ElemType>
void DoublyLinkedList<ElemType>::clear()
{
	for (DoublyLinkedListNode* p = m_head;p->m_next!=m_head;)
	{
		DoublyLinkedListNode* temp = p->m_next;
		p->m_next=p->m_next->m_next;
		p->m_next->m_prev = p;
		delete temp;
		
	}
	m_size=0;
}

template<class ElemType>
bool DoublyLinkedList<ElemType>::isEmpty() const
{
	return m_size==0;
}

template<class ElemType>
int DoublyLinkedList<ElemType>::size() const
{
	return m_size;
}



template<class ElemType>
typename DoublyLinkedList<ElemType>::Iterator DoublyLinkedList<ElemType>::search(const ElemType& target)
{
	DoublyLinkedListNode* p = m_head->m_next;
	for (;p!=m_head; p=p->m_next)
	{
		if (!(p->m_element<target || target<p->m_element))	// equals
		{
			typename DoublyLinkedList<ElemType>::Iterator itr(this, p);
			return itr;
		
		}
	}
	return end();
}








template<class ElemType>
typename DoublyLinkedList<ElemType>::ConstIterator DoublyLinkedList<ElemType>::search(const ElemType& target) const
{
	DoublyLinkedListNode* p = m_head->m_next;
	for (;p!=m_head; p=p->m_next)
	{
		if (!(p->m_element<target || target<p->m_element))
		{
			typename DoublyLinkedList<ElemType>::ConstIterator itr(this, p);
			return itr;
		
		}
	}
	return end();
}

template<class ElemType>
Pair<typename DoublyLinkedList<ElemType>::Iterator, typename DoublyLinkedList<ElemType>::Iterator> DoublyLinkedList<ElemType>::searchRange(const ElemType& target)
{
	bool targetFound=false;
	typename DoublyLinkedList<ElemType>::Iterator itrFirst(this,NULL);
	typename DoublyLinkedList<ElemType>::Iterator itrSecond(this,NULL);
	
	DoublyLinkedListNode* p = m_head->m_next;
	for (;p!=m_head; p=p->m_next)
	{
		if (!targetFound && !(p->m_element<target || target<p->m_element))
		{
			targetFound=1;
			itrFirst.set(this,p);
		}
		if (targetFound && (p->m_element<target || target<p->m_element))
		{
			targetFound=0;
			itrSecond.set(this,p);
		}
	}
	
	Pair<typename DoublyLinkedList<ElemType>::Iterator, typename DoublyLinkedList<ElemType>::Iterator> searchReturn(itrFirst, itrSecond);
	return searchReturn;

}

template<class ElemType>
Pair<typename DoublyLinkedList<ElemType>::ConstIterator, typename DoublyLinkedList<ElemType>::ConstIterator> DoublyLinkedList<ElemType>::searchRange(const ElemType& target) const
{
	bool targetFound=false;
	typename DoublyLinkedList<ElemType>::ConstIterator itrFirst(this,NULL);
	typename DoublyLinkedList<ElemType>::ConstIterator itrSecond(this,NULL);
	
	DoublyLinkedListNode* p = m_head->m_next;
	for (;p!=m_head; p=p->m_next)
	{
		if (!targetFound && !(p->m_element<target || target<p->m_element))
		{
			targetFound=1;
			itrFirst.set(this,p);
		}
		if (targetFound && (p->m_element<target || target<p->m_element))
		{
			targetFound=0;
			itrSecond.set(this,p);
		}
	}
	
	Pair<typename DoublyLinkedList<ElemType>::ConstIterator, typename DoublyLinkedList<ElemType>::ConstIterator> searchReturn(itrFirst, itrSecond);
	return searchReturn;

}

template<class ElemType>
typename DoublyLinkedList<ElemType>::Iterator DoublyLinkedList<ElemType>::begin()
{
	typename DoublyLinkedList<ElemType>::Iterator itr(this, m_head->m_next);
	if (m_size==0)
		itr.set(this, 0);
	return itr;
}

template<class ElemType>
typename DoublyLinkedList<ElemType>::ConstIterator DoublyLinkedList<ElemType>::begin() const
{
	typename DoublyLinkedList<ElemType>::ConstIterator itr(this, m_head->m_next);
	if (m_size==0)
		itr.set(this, 0);
	return itr;
}

template<class ElemType>
typename DoublyLinkedList<ElemType>::Iterator DoublyLinkedList<ElemType>::end()
{
	typename DoublyLinkedList<ElemType>::Iterator itr(this, 0);
	return itr;
}

template<class ElemType>
typename DoublyLinkedList<ElemType>::ConstIterator DoublyLinkedList<ElemType>::end() const
{
	typename DoublyLinkedList<ElemType>::ConstIterator itr(this, 0);
	return itr;
}

#endif // DOUBLY_LINKED_LIST_IMPL