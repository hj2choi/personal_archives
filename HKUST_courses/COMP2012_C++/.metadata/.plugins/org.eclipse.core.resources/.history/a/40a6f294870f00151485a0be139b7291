/*
 * Token.h
 *
 *  Created on: May 28, 2015
 *      Author: HongJoon CHOI
 *
 *	Generic Token class.
 *
 *
 *
 *	class Operand should
 *		- define a constructor with an input 'double', or
 *		- better to define >> stream operator
 *		- define operations +,-,* and /.
 */

#ifndef TOKEN_H_
#define TOKEN_H_
#include <string>
#include <sstream>

template <typename T>
T stringToNumber(const std::string& numberAsString)
{
	T valor;

	std::stringstream stream(numberAsString);
	stream>>valor;
	if (stream.fail())
	{
		return T();
	}
	return valor;
}

// returns priority (0 is highest)
// if 100 is returned, it is a number
int operatorPriority(char op)
{
	switch (op)
	{
	case '(':
		return 0;
	case ')':
		return 1;
	case '*':
		return 2;
	case '/':
		return 2;
	case '+':
		return 3;
	case '-':
		return 3;
	default:
		return 100;
	}
}

bool isStartOfNumber(char s){return (s=='.'||('0'<=s&&s<='9'));}
static std::string readOperandSequence(std::string::iterator& begin, std::string::iterator end)
{
	std::string retStr;
	while (begin!=end)
	{
		if (isStartOfNumber(*begin))
		{
			retStr.push_back(*begin);
			//std::cout<<*begin;
		}
		else
		{
			break;
		}

		begin++;
	}
	begin--;
	return retStr;
}

class Token{
public:
	//static bool isSigniture(char s){return (s=='('||s==')'||s=='+'||s=='-'||s=='*'||s=='/');}
	// verify if the given character is a signiture.
	//static bool isBracket(char s){return (s=='('||s==')');}
	// verify if the given character is a bracket.
	//static bool isOperator(char s){return (s=='+'||s=='-'||s=='*'||s=='/');}
	// verify if the given character is an operator.

	virtual bool isOperator() =0;
	virtual bool isOperand() = 0;
	virtual bool isOpeningBracket() =0;
	virtual bool isClosingBracket() = 0;


	//static bool isStartOfVariable(char s){}

	Token(){};
	virtual ~Token(){};
	//Token():signiture(' '),operand(NULL),typeOperand(0){};
	//Token(char& sign):signiture(sign),operand(NULL),typeOperand(0){};
	//Token(const std::string& charSeq):operand(stringToNumber<Operand>(charSeq)),typeOperand(1){};

	//bool isOperand()const{return true;};
	//char getSigniture(){return signiture;}
	//Operand getOperand(){return operand;}
	// if 100 is returned, it is a number


private:

};


class Operand : public Token
{
public:
	Operand(const std::string& charSeq):value(stringToNumber<double>(charSeq)){};
	virtual bool isOperator(){return false;}
	virtual bool isOperand(){return true;}
	virtual bool isOpeningBracket(){return false;}
	virtual bool isClosingBracket(){return false;}
	virtual ~Operand(){};
	double getValue() {return value;}
	std::string getValueString()
	{
		std::ostringstream strs;
		strs << value;
		return strs.str();
	}
private:
	double value;
};


class Operator : public Token
{
public:
	Operator(char sign):signiture(sign){};
	virtual bool isOperator(){return signiture!='(' && signiture!=')';}
	virtual bool isOperand(){return false;}
	virtual bool isOpeningBracket(){return signiture=='(';}
	virtual bool isClosingBracket(){return signiture==')';}
	virtual ~Operator(){};
	char getSigniture() {return signiture;}

private:
	char signiture;
};

#endif /* TOKEN_H_ */
