import java.io.*;
class Euler075 
{
	static long initialTimeInSpeedCheck=0;
	static double[] timeDatabase = new double[100000];
	static int timeDatabaseCount=0;
	static int dijkstraPathCost=0;
	static long actualStartTime=0;
	static int count=0;
	static int mapHeight =0;
	public static void main(String[] args) throws IOException
	{
		actualStartTime=System.currentTimeMillis();
		int mapWidth=0;
		int totalPathCost=0;
		String[] file = fileReader("file.txt");

		int[][] costMatrix = new int[1000][1000];
		int[] dijkstraPathCostList = new int[10000];
		
		for (int y=0; y<mapHeight; y++)
		{
			String[] line = file[y].split(",");
			mapWidth=line.length;
			for (int x=0; x<line.length; x++)
				costMatrix[x][y] = Integer.parseInt(line[x]);
		}
		printCostMatrix(costMatrix, mapWidth, mapHeight);
		for (int startX=0; startX<mapHeight; startX++)
		{
			for (int destinationX=0; destinationX<mapHeight; destinationX++)
			{
				startTimer();
				boolean[][] pathMap = dijkstraPathFinding(costMatrix, 0, startX, mapWidth-1, destinationX, mapWidth, mapHeight);
				System.out.print("initX="+startX+"  destX="+destinationX+"  ");
				dijkstraPathCostList[count++]=dijkstraPathCost;
				long actualTime=System.currentTimeMillis()-actualStartTime;
				endTimer(destinationX, startX, mapHeight, mapHeight);
				System.out.println(" actual = "+actualTime/60000+"m"+(actualTime/1000)%60+"s");
			}
			
		}
		System.out.println(dijkstraPathCostList[min(dijkstraPathCostList, count)]);
	}
	public static String[] fileReader(String fileName) throws IOException		// returns array with loaded data of file (String filename)
	{
		int count=0;
		String[] file = new String[30000000];
		File f = new File(fileName);
		FileReader fr = new FileReader(f);
		BufferedReader in  = new BufferedReader(fr);
		while (in.ready())
			file[mapHeight++] = in.readLine();
		return file;
	}

	public static void save(String fileName, String[]data, int arraySize) throws IOException
	{
		File f = new File(fileName);
		FileWriter fw = new FileWriter(f);
		PrintWriter out = new PrintWriter(fw);
		for (int i=0;i<arraySize ;i++ )
				out.println(data[i]);
		out.close();
	}
	//===================================Djikstra pathfinding algorithm===========================
/**
returns lists of shortest path taken by djikstra pathfinding algorithm by boolean[][] dataType
function Pre-requisites: generatePathList(), canOpenListAt(), djikstraMin(), min()
*/
	public static boolean[][] dijkstraPathFinding(int[][] walkCost, int startX, int startY, int destinationX, int destinationY, int worldWidth, int worldHeight)	//djikstra's pathfinding algorithm
	{
		boolean[][] openList = new boolean[worldWidth][worldHeight];			//stores wheter given coordinate is open
		boolean[][] closedList = new boolean[worldWidth][worldHeight];			//stores wheter given coordinate is closed
		int[][] djikstraCost = new int[worldWidth][worldHeight];		//stored djikstra cost from starting point
		for (int x=0; x<worldWidth; x++)	// initial value for djikstraCost = infinity(99999);
			for (int y=0; y<worldHeight; y++)
				djikstraCost[x][y]=9999999;
		int currentX=startX;
		int currentY=startY;
		djikstraCost[currentX][currentY]=walkCost[currentX][currentY];
		
		while (!(currentX==destinationX && currentY==destinationY))
		{
			openList[currentX][currentY]=false; // closes list at current location
			closedList[currentX][currentY]=true;	// closes list at current location
			//System.out.println(currentX+" "+currentY);
			//printDijkstraCost(djikstraCost, worldWidth, worldHeight);
			//delay(500);
			// opens adjacent coordinates(two vertices are linked by an edge) to current coordinate
			if (canOpenListAt(closedList, currentX+1, currentY, worldWidth, worldHeight))
				openList[currentX+1][currentY]=true;
			//if (canOpenListAt(closedList, currentX-1, currentY, worldWidth, worldHeight))
			//	openList[currentX-1][currentY]=true;
			if (canOpenListAt(closedList, currentX, currentY+1, worldWidth, worldHeight))
				openList[currentX][currentY+1]=true;
			if (canOpenListAt(closedList, currentX, currentY-1, worldWidth, worldHeight))
				openList[currentX][currentY-1]=true;
			//end
			
			//goes through all openedLists and update djikstraCost
			for (int x=0; x<worldWidth; x++)
				for (int y=0; y<worldHeight; y++)
					if (openList[x][y] && (djikstraCost[currentX][currentY]+walkCost[x][y])<djikstraCost[x][y])//if current cost>updatedCost
						djikstraCost[x][y]=djikstraCost[currentX][currentY]+walkCost[x][y];
			//search through all openedLists and find coordinate with min djikstraCost
			int[] minCostIndex = djikstraMin(openList, djikstraCost, worldWidth, worldHeight);
			currentX=minCostIndex[0];
			currentY=minCostIndex[1];
			//update currentX and currentY. Then, repeat all steps
		}
		//System.out.println(currentX+" "+currentY);
		// creates pathList according to generated cost map and ends procedure.
		dijkstraPathCost = djikstraCost[currentX][currentY];
		System.out.print("Dijkstra path cost = "+djikstraCost[currentX][currentY]+"\t");
		return generatePathList(djikstraCost, startX, startY, destinationX, destinationY, worldWidth, worldHeight);
	}

	private static boolean[][] generatePathList(int[][] djikstraCost, int startX, int startY, int destinationX, int destinationY, int worldWidth, int worldHeight)
	{
		djikstraCost[startX][startY]=1;
		boolean[][] pathList = new boolean[worldWidth][worldHeight];
		boolean[][] allFalse = new boolean[worldWidth][worldHeight];
		pathList[destinationX][destinationY]=true;
		while (!(startX==destinationX && startY==destinationY))
		{
			//System.out.println(destinationX+" "+destinationY);
			int[] adjacentScores = new int[4];
			if (canOpenListAt(allFalse, destinationX+1, destinationY, worldWidth, worldHeight))
				adjacentScores[0]=djikstraCost[destinationX+1][destinationY];
			if (canOpenListAt(allFalse, destinationX-1, destinationY, worldWidth, worldHeight))
				adjacentScores[1]=djikstraCost[destinationX-1][destinationY];
			if (canOpenListAt(allFalse, destinationX, destinationY+1, worldWidth, worldHeight))
				adjacentScores[2]=djikstraCost[destinationX][destinationY+1];
			if (canOpenListAt(allFalse, destinationX, destinationY-1, worldWidth, worldHeight))
				adjacentScores[3]=djikstraCost[destinationX][destinationY-1];
			int index = min(adjacentScores, 4);
			switch (index)
			{
			case 0:
				pathList[destinationX+1][destinationY]=true;
				destinationX=destinationX+1;
				destinationY=destinationY;
				break;
			case 1:
				pathList[destinationX-1][destinationY]=true;
				destinationX=destinationX-1;
				destinationY=destinationY;
				break;
			case 2:
				pathList[destinationX][destinationY+1]=true;
				destinationX=destinationX;
				destinationY=destinationY+1;
				break;
			case 3:
				pathList[destinationX][destinationY-1]=true;
				destinationX=destinationX;
				destinationY=destinationY-1;
				break;
			}
		}
		pathList[startX][startY]=false;
		return pathList;
	}
	private static boolean canOpenListAt(boolean[][] closedList, int x, int y, int worldWidth, int worldHeight)	//exception handling
	{
		if (x<0 || x>=worldWidth)
			return false;
		if (y<0 || y>=worldHeight)
			return false;
		if (!closedList[x][y])
			return true;
		return false;

	}
	private static int[] djikstraMin(boolean[][] searchList, int[][] values, int lengthX, int lengthY)
	{
		int currentMin=9999999;
		int[] index=new int[2];
		for (int x=0; x<lengthX; x++)
			for (int y=0; y<lengthY; y++)
				if (searchList[x][y] && values[x][y]<currentMin)
				{
					index[0]=x;
					index[1]=y;
					currentMin=values[x][y];
				}
		return index;
	}
	private static int min(int[] list, int length)
	{
		double temp=9999999;
		int position=0;
		for (int i=0;i<length;i++)
			if (list[i]<temp && list[i]>0)
			{
				temp=list[i];
				position=i;
			}
		return position;
	}
	public static void printDijkstraCost(int[][] djikstraCost, int worldWidth, int worldHeight)
	{
		for (int y=0; y<worldHeight; y++)
		{
			for (int x=0; x<worldWidth; x++)
			{
				if (djikstraCost[x][y]>=100000)
					System.out.print(allignMiddle("", 3));
				else
					System.out.print(allignMiddle(""+(djikstraCost[x][y]%100+1), 3));
				
			}
			System.out.println();
		}

	}
	public static void printCostMatrix(int[][] costMatrix, int worldWidth, int worldHeight)
	{
		for (int y=0; y<worldHeight; y++)
		{
			for (int x=0; x<worldWidth; x++)
			{
				System.out.print(allignMiddle(costMatrix[x][y]%10000+"",6));
			}
			System.out.println();
		}
		
	}
	public static void delay(int a)		//Stop Thread for (int a) MilliSeconds
	{
		try {Thread.sleep((int)a);}
		catch (Exception e){System.out.println("Delay Function Error \n Caused by:"+e);}
	}
	public static String allignMiddle(String a, int distance)	// " aaa ccc" if distance = 5
	{
		String ss = "";
		int space=distance-a.length();
		if (space%2!=0)
		    ss+=" ";
		for (int i=0;i<space/2 ;i++ )
		    ss+=" ";
		ss+=a;
		for (int i=0;i<space/2 ;i++ )
		    ss+=" ";
		return ss;
	}
	public static void startTimer()
	{
		initialTimeInSpeedCheck=System.currentTimeMillis();
	}

	public static void endTimer(int currentX, int currentY, int maxX, int maxY)
	{
		long time = (System.currentTimeMillis()-initialTimeInSpeedCheck);
		timeDatabase[timeDatabaseCount++]=time;
		double eta= (maxX*maxY-currentY*maxX-currentX)*mean(timeDatabase, timeDatabaseCount);
		System.out.print("    "+time+"ms\teta="+(int)(eta/60000)+"m "+(int)((eta/1000)%60)+"s");
	}
	public static double mean(double[] list, int length)
	{
		double summision=0;
		for (int i=0; i<length; i++)
			summision+=list[i];
		return summision/length;
	}
}
