/*
 * stringset.cpp
 *
 *  Created on: Feb 24, 2015
 *      Author: HongJoon
 */
#include "stringset.h"

using namespace std;

void StringSet::deallocateArray()
{
	delete[] arr;
	arr=0;
	size=0;
	capacity=0;
}

StringSet::StringSet()
{
	size=0;
	capacity=0;
	arr=NULL;
}

StringSet::~StringSet()
{
	deallocateArray();
	//delete this;
}

StringSet::StringSet(const std::string& oneItem)
{
	size=1;
	capacity=2;
	arr = new std::string[capacity];
	arr[0] = oneItem;

}

StringSet::StringSet(const string inputStrArr[], int sz)
{
	size = 0;
	capacity = 0;			//double the capacity
	arr = NULL;
	for (int i=0; i<sz; i++)
		insert(inputStrArr[i]);

}

StringSet::StringSet(const StringSet& otherSet)
{
	size = otherSet.size;
	capacity = otherSet.capacity;
	arr = new string[capacity];
	for (int i=0; i< size; i++)
		arr[i] = otherSet.arr[i];

}

string StringSet::getItem(int index) const
{
	return arr[index];
}

int StringSet::getSize(void) const
{
	return size;
}

int StringSet::getCapacity(void) const
{
	return capacity;
}

bool StringSet::isEmpty(void) const
{
	if (size==0 || arr==NULL)
		return true;
	else
		return false;
}

bool StringSet::exists(const string& item) const
{
	for (int i=0; i<size; i++)
		if (arr[i]==item/*arr[i].compare(item) == 0*/)
			return true;
	return false;
}

int StringSet::searchItem(const string& item) const
{
	for (int i=0; i<size; i++)
		if (arr[i].compare(item) == 0)
			return i;
	return -1;
}

bool StringSet::insert(const string& newItem)
{
	if(!exists(newItem))
	{
		if (size<capacity)
			arr[size++] = newItem;
		else
		{
			capacity=(size+1)*2;
			string* newArr = new string[capacity];
			for (int i=0; i<size; i++)
				newArr[i] = arr[i];
			newArr[size] = newItem;
			++size;
			delete[] arr;
			arr = newArr;
		}
		return true;
	}
	else
		return false;
}


bool StringSet::remove(const string& item)
{
	int index = searchItem(item);
	if(index>=0)
	{
		for (int i=index; i<size-1; i++)	// delete one item
			arr[i] = arr[i+1];
		size--;
		if (size==0)	// return empty set if size = 0 after deleting
		{
			delete[] arr;
			arr = NULL;
			capacity=0;
		}
		else if (size*2<capacity)	// shrink the capacity
		{
			capacity/=2;
			string* newArr = new string[capacity];

			for (int i = 0; i<size; i++)
				newArr[i] = arr[i];
			delete[] arr;
			arr = newArr;
		}
		return true;
	}
	else
		return false;
}


StringSet& StringSet::assign(const StringSet& inputSet)
{
	deallocateArray();
	size = inputSet.size;
	capacity = inputSet.capacity;
	arr = new string[capacity];
	for (int i=0; i<size; i++)
		arr[i] = inputSet.arr[i];
	return *this;

}

bool StringSet::equals(const StringSet& other) const
{
	if (this->size == other.size)
	{
		for (int i=0; i<size; i++)
			if (!exists(other.arr[i]))
				return false;
		return true;
	}
	return false;
}

bool StringSet::notEquals(const StringSet& other) const
{
	return !equals(other);
}

StringSet& StringSet::setUnion(const StringSet& other)
{
	for (int i=0; i<other.size; i++)
		if (!exists(other.arr[i]))
			insert(other.arr[i]);
	return *this;
}

StringSet& StringSet::setIntersect(const StringSet& other)
{
	for (int i=0; i<size; i++)
		if (!other.exists(arr[i]))	// i-- might prevent potential error
			remove(arr[i--]);
	return *this;
}

StringSet& StringSet::setDifference(const StringSet& other)
{
	for (int i=0; i<size; i++)
		if (other.exists(arr[i]))	// same i-- technique applied
			remove(arr[i--]);
	return *this;
}

StringSet setUnion(const StringSet& first, const StringSet& second)
{
	StringSet unionSet(first);
	for (int i=0; i<second.getSize(); i++)
		unionSet.insert(second.getItem(i));
	return unionSet;
}

StringSet setIntersect(const StringSet& first, const StringSet& second)
{
	StringSet intersectionSet(first);
	for (int i=0; i<intersectionSet.getSize(); i++)
		if (!second.exists(intersectionSet.getItem(i)))		// i-- applied
			intersectionSet.remove(intersectionSet.getItem(i--));
	return intersectionSet;
}

StringSet setDifference(const StringSet& first, const StringSet& second)
{
	StringSet complement(first);
	for (int i=0; i<complement.getSize(); i++)
		if (second.exists(complement.getItem(i)))	// same i-- technique applied
			complement.remove(complement.getItem(i--));
	return complement;
}

