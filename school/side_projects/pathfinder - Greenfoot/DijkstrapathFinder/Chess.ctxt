#BlueJ class context
comment0.params=
comment0.target=Chess()
comment1.params=
comment1.target=void\ Up()
comment10.params=closedList\ x\ y\ worldWidth\ worldHeight
comment10.target=boolean\ canOpenListAt(boolean[][],\ int,\ int,\ int,\ int)
comment11.params=searchList\ values\ lengthX\ lengthY
comment11.target=int[]\ djikstraMin(boolean[][],\ int[][],\ int,\ int)
comment12.params=list\ length
comment12.target=int\ min(int[],\ int)
comment13.params=
comment13.target=void\ showPath()
comment2.params=
comment2.target=void\ Down()
comment3.params=
comment3.target=void\ Left()
comment4.params=
comment4.target=void\ Right()
comment5.params=x\ y
comment5.target=void\ moveToLocation(int,\ int)
comment6.params=
comment6.target=void\ act()
comment7.params=
comment7.target=int[][]\ generateWalkCost()
comment7.text=\r\n\ \ \ \ returns\ lists\ of\ shortest\ path\ taken\ by\ djikstra\ pathfinding\ algorithm\ by\ boolean[][]\ dataType\r\n\ \ \ \ function\ Pre-requisites\:\ generatePathList(),\ canOpenListAt(),\ djikstraMin(),\ min()\r\n
comment8.params=walkCost\ startX\ startY\ destinationX\ destinationY\ worldWidth\ worldHeight
comment8.target=boolean[][]\ djikstraPathFinding(int[][],\ int,\ int,\ int,\ int,\ int,\ int)
comment9.params=djikstraCost\ startX\ startY\ destinationX\ destinationY\ worldWidth\ worldHeight
comment9.target=boolean[][]\ generatePathList(int[][],\ int,\ int,\ int,\ int,\ int,\ int)
numComments=14
